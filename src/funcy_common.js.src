    // new stuff
    // _superAttr = null if no supertag
    // are we correctly handling it when _superAttr things within an array, for instances if it has classes to meld in? and events

    //can we add a help function funcyTag.find(id) to return the elem and its attributes? even creating object if we must? maybe? but how if it
    // doesn't go into xElem? _findable? if has data?
    // explain createElement
    // explain funcyStyle

    /*************** camel casing ***************/

    gCamelToDashRegexp = new RegExp('([A-Z])','g');

    function camel_to_dash(camel)
    // turn upper characters to -c, for example, "cssBackgroundColor" becomes "css-background-color"
    {
        return camel.replace(gCamelToDashRegexp,function(match,c,offset,string){
                //alert("arguments.length = " + arguments.length + ' match='+match + ' c='+c+' offset='+offset+' string='+string);
                return '-' + c.toLowerCase();
            });
    }

    /*************** utility functions ***************/

    function is_array(o) {  // from http://web.archive.org/web/20100424091244/http://www.ajaxdr.com/code/javascript-version-of-phps-is_array-function/
        if((o !== null) && (typeof o === 'object')) {
            return (typeof o.push === 'undefined') ? false : true;
        }else {
            return false;
        }
    }

    function isPlainObj(o) { // from http://stackoverflow.com/questions/5876332/how-can-i-differentiate-between-an-object-literal-other-javascript-objects
        return (typeof o === 'object') && (o.constructor === Object)  && !('_ft_render_' in o);
    }

    /*************** color helpers ***************/

    function InternalColor(rgba) {
        this._ = rgba;
    }

    // internally we know something is a color if it is an object with a _.r (._. has properties .r, .g, .b, .a)
    function color(args) { /* (clr), or ('#clr'), or (clr, opacity) or (r,g,b) or (r,g,b,a) */
        var rawrgb, r, g, b, a = 1.0;

        if ( 3 <= arguments.length )
        {
            r = arguments[0];
            g = arguments[1];
            b = arguments[2];
            if ( 4 <= arguments.length ) { a = arguments[3]; }
        }
        else
        {
            if ( 2 === arguments.length )
            {
                a = arguments[1];
            }
            rawrgb = arguments[0];
            if (((typeof rawrgb) === 'string') || (rawrgb instanceof String))
            {
                // the only types we understand are #hhh and #hhhhhh
                if ( rawrgb.length === 4 )
                {
                    rawrgb = '#' + rawrgb.substring(1,2) + rawrgb.substring(1,2) +
                                   rawrgb.substring(2,3) + rawrgb.substring(2,3) +
                                   rawrgb.substring(3,4) + rawrgb.substring(3,4);
                }
                r = parseInt(rawrgb.substring(1,3),16);
                g = parseInt(rawrgb.substring(3,5),16);
                b = parseInt(rawrgb.substring(5,7),16);
            }
            else
            {
                // this is an integer
                /*jslint bitwise:false */
                r = (rawrgb & 0xFF0000) >> 16;
                g = (rawrgb & 0xFF00) >> 8;
                b = (rawrgb & 0xFF);
                /*jslint bitwise:true */
            }
        }
        if ( r < 0 ) { r = 0; }
        if ( g < 0 ) { g = 0; }
        if ( b < 0 ) { b = 0; }
        if ( 255 < r ) { r = 255; }
        if ( 255 < g ) { g = 255; }
        if ( 255 < b ) { b = 255; }
        if ( a < 0.0 ) { a = 0.0; }
        if ( 1.0 < a ) { a = 1.0; }
        return new InternalColor( {r:r,g:g,b:b,a:a} );
    }

    InternalColor.prototype.mix = function(color2,ratio) { // ratio of color1/result - 0.75 meanst 75% color1
        var ratio2 = 1.0 - ratio;
        return color( Math.round(this._.r*ratio+color2._.r*ratio2),
                      Math.round(this._.g*ratio+color2._.g*ratio2),
                      Math.round(this._.b*ratio+color2._.b*ratio2),
                      Math.round(this._.a*ratio+color2._.a*ratio2) );
    };
    InternalColor.prototype.add = function(color2) {
        return color( this._.r+color2._.r,this._.g+color2._.g,
                      this._.b+color2._.b,(this._.a+color2._.a)/2 );
    };
    InternalColor.prototype.sub = function(color2) {
        return color( this._.r-color2._.r,this._.g-color2._.g,
                      this._.b-color2._.b,(this._.a+color2._.a)/2 );
    };
    InternalColor.prototype.toString = function() {
        var a = this._.a;

        function hex(c)
        {
            if ( c < 16 ) { return '0' + c.toString(16); }
            else { return c.toString(16); }
        }

        if ( 1.0 <= a )
        {
            return '#' + hex(this._.r) + hex(this._.g) + hex(this._.b);
        }
        else
        {
            return 'rgba(' + this._.r + "," + this._.g + "," + this._.b + "," + this._.a + ')';
        }
    };
    InternalColor.prototype.r = function(setClr) {
        if ( arguments.length )
        {
            return color(setClr,this._.g,this._.b,this._.a);
        }
        return this._.r;
    };
    InternalColor.prototype.g = function(setClr) {
        if ( arguments.length )
        {
            return color(this._.r,setClr,this._.b,this._.a);
        }
        return this._.g;
    };
    InternalColor.prototype.b = function(setClr) {
        if ( arguments.length )
        {
            return color(this._.r,this._.g,setClr,this._.a);
        }
        return this._.b;
    };
    InternalColor.prototype.a = function(setClr) {
        if ( arguments.length )
        {
            return color(this._.r,this._.g,this._.b,setClr);
        }
        return this._.a;
    };
