    // new stuff
    // _superAttr = null if no supertag
    // are we correctly handling it when _superAttr things within an array, for instances if it has classes to meld in? and events

    //can we add a help function funcyTag.find(id) to return the elem and its attributes? even creating object if we must? maybe? but how if it
    // doesn't go into xElem? _findable? if has data?
    // explain createElement
    // explain funcyStyle

    /*************** camel casing ***************/

    gCamelToDashRegexp = new RegExp('([A-Z])','g');

    function camel_to_dash(camel)
    // turn upper characters to -c, for example, "cssBackgroundColor" becomes "css-background-color"
    {
        return camel.replace(gCamelToDashRegexp,function(match,c,offset,string){
                //alert("arguments.length = " + arguments.length + ' match='+match + ' c='+c+' offset='+offset+' string='+string);
                return '-' + c.toLowerCase();
            });
    }

    /*************** utility functions ***************/

    function is_array(o) {  // from http://web.archive.org/web/20100424091244/http://www.ajaxdr.com/code/javascript-version-of-phps-is_array-function/
        if((o !== null) && (typeof o === 'object')) {
            return (typeof o.push === 'undefined') ? false : true;
        }else {
            return false;
        }
    }

    function isPlainObj(o) { // from http://stackoverflow.com/questions/5876332/how-can-i-differentiate-between-an-object-literal-other-javascript-objects
        return (typeof o === 'object') && (o.constructor === Object)  && !('_ft_render_' in o);
    }

    /*************** color helpers ***************/

    // internally we know something is a color if it is an object with a _fclr_ property [r,g,b,a]
    function color(arg) { /* arg is color, or '#color', or [color], or [color, opacity] or [r,g,b] or [r,g,b,a] */
        var clr, rawrgb, r, g, b, a = 1.0;

        if ( !is_array(arg) ) { arg = [arg]; }

        if ( 3 <= arg.length )
        {
            r = arg[0];
            g = arg[1];
            b = arg[2];
            if ( 4 <= arg.length ) { a = arg[3]; }
        }
        else
        {
            if ( 2 === arg.length )
            {
                a = arg[1];
            }
            rawrgb = arg[0];
            if (((typeof rawrgb) === 'string') || (rawrgb instanceof String))
            {
                // the only types we understand are #hhh and #hhhhhh
                if ( rawrgb.length === 4 )
                {
                    rawrgb = '#' + rawrgb.substring(1,2) + rawrgb.substring(1,2) +
                                   rawrgb.substring(2,3) + rawrgb.substring(2,3) +
                                   rawrgb.substring(3,4) + rawrgb.substring(3,4);
                }
                r = parseInt(rawrgb.substring(1,3),16);
                g = parseInt(rawrgb.substring(3,5),16);
                b = parseInt(rawrgb.substring(5,7),16);
            }
            else
            {
                // this is an integer
                /*jslint bitwise:false */
                r = (rawrgb & 0xFF0000) >> 16;
                g = (rawrgb & 0xFF00) >> 8;
                b = (rawrgb & 0xFF);
                /*jslint bitwise:true */
            }
            if ( r < 0 ) { r = 0; }
            if ( g < 0 ) { g = 0; }
            if ( b < 0 ) { b = 0; }
            if ( 255 < r ) { r = 255; }
            if ( 255 < g ) { g = 255; }
            if ( 255 < b ) { b = 255; }
        }
        clr = { _fclr_: [r,g,b,a] };

        clr.mix = function(color2,ratio) { // ratio of color1/result - 0.75 meanst 75% color1
        };
        clr.add = function(color2) {
            return clr;
        };
        clr.sub = function(color2) {
            return clr;
        };
        clr.toString = function() {
            var a = this._fclr_[3];

            function hex(c)
            {
                if ( c < 16 ) { return '0' + c.toString(16); }
                else { return c.toString(16); }
            }

            if ( 1 <= a )
            {
                return '#' + hex(this._fclr_[0]) + hex(this._fclr_[1]) + hex(this._fclr_[2]);
            }
            else
            {
                return 'rgba(' + this._fclr_.join(',') + ')';
            }
        };

        return clr;
    }
